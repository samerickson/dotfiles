- name: Install Chocolatey
  win_shell: Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

- name: Enable file extension
  win_shell: |
    Push-Location
    Set-Location HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
    Set-ItemProperty . HideFileExt "0"
    Pop-Location
    Stop-Process -processName: Explorer -force

- name: Show hidden files
  win_shell: |
    $value = -not $Off.IsPresent
    Set-ItemProperty -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced `
    -Name Hidden -Value 'On' -type DWORD

    $shell = New-Object -ComObject Shell.Application
    $shell.Windows() |
        Where-Object { $_.document.url -eq $null } |
        ForEach-Object { $_.Refresh() }

# - name: Remove default apps
#   win_shell: |
#     $AppArrayList = Get-AppxPackage -AllUsers -PackageTypeFilter Bundle | Select-Object -Property Name, PackageFullName | Sort-Object -Property Name

#     foreach ($App in $AppArrayList) {
#         if (($App.Name -in "Microsoft.WindowsCalculator","Microsoft.WindowsStore","Microsoft.Appconnector","Microsoft.WindowsCommunicationsApps","Microsoft.WindowsSoundRecorder","Microsoft.Windows.Photos","Microsoft.BingWeather","Microsoft.WindowsCamera")) {
#             Write-Output -InputObject "Skipping essential Windows app: $($App.Name)"
#         }
#         else {
#             $AppPackageFullName = Get-AppxPackage -Name $App.Name | Select-Object -ExpandProperty PackageFullName
#             $AppProvisioningPackageName = Get-AppxProvisionedPackage -Online | Where-Object { $_.DisplayName -like $App.Name } | Select-Object -ExpandProperty PackageName

#             try {
#                 Write-Output -InputObject "Removing AppxPackage: $AppPackageFullName"
#                 Remove-AppxPackage -Package $AppPackageFullName -ErrorAction Stop
#             }
#             catch [System.Exception] {
#                 Write-Warning -Message $_.Exception.Message
#             }
            
#             try {
#                 Write-Output -InputObject "Removing AppxProvisioningPackage: $AppProvisioningPackageName"
#                 Remove-AppxProvisionedPackage -PackageName $AppProvisioningPackageName -Online -ErrorAction Stop
#             }
#             catch [System.Exception] {
#                 Write-Warning -Message $_.Exception.Message
#             }
#         }
#     }
