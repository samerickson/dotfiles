#!/usr/bin/env lua

-- This file is used to sync keybindings to frequently edited
--  files across all of the applications that are relevant 

-- Neovim will not allow ${XDG_CONFIG_HOME:-$HOME/.config}, so such
-- functionality needs to be implemented here
local config = os.getenv("XDG_CONFIG_HOME") or "~/.config" 
local editor = os.getenv("EDITOR") or "vim"

local nvim_conf = config .. "/nvim"
local nvim_lua = nvim_conf .. "/lua"
local shell_conf = config .. "/shell" or "~/.config/shell"
local bin = os.getenv("DOTFILES").. "/bin" or "~/.dotfiles/bin"
local zsh = os.getenv("ZDOTDIR") or config .. "~"

local shell_file = os.getenv("XDG_CONFIG_HOME") .. "/shell/keybr.sh"
local nvim_file = os.getenv("XDG_CONFIG_HOME") .. "/nvim/lua/keybr.lua"

local file_header = "This file was generated by keybr. Do not edit manually"

local keybindings = {
    -- This file
    {cfk = bin .. "/keybr"},

    -- Shell agnostic aliases
    {cfa = shell_conf .. "/aliases"},
    {cfst = config .. "starship.toml"},

    -- Neovim files
    {cfni = nvim_conf .. "/init.lua"},
    {cfnp = nvim_lua .. "/plugins.lua"},
    {cfno = nvim_lua .. "/opts.lua"},
    {cfnk = nvim_lua .. "/keymap.lua"},
    {cfnc = nvim_lua .. "/colors.lua"},

    -- Zsh files
    {cfze = "~/.zshenv"},
    {cfzc = zsh .. "/.zshrc"},
    {cfzp = zsh .. "/.zprofile"},

    -- Misc config files
    {cfs = "~/.ssh/config"},
    {cfi = config .. "/i3/config"},
    {cft = config .. "/tmux/tmux.conf"},

    -- These are not really used on my usual machines, but sometimes I have
    -- to use vim and bash, so they stay here
    {cfp = "~/.profile"},
    {cfb = "~/.bashrc"},
    {cfv = "~/.vim/vimrc"},

}

local directories = {
    -- Frequent directories
    {cdb = bin},
    {cdc = os.getenv("DOTFILES")},
    {cdg = "~/dev/github"},
    {cdl = "~/dev/lang"},
    {cda = "~/dev/personal"},
    {cdd = "~/dev"},
    {cdn = nvim_conf},

    -- Frequent project repositories
    {cda = "~/dev/personal/cms5000"}
}

--- Write aliases to files
---
--- assumes files are open and error checking is already done
---
--- @param s_file Shell file pointer
--- @param n_file Nvim file pointer
--- @param map Keybinding map to use
function createEntries(s_file, n_file, map, shell_cmd)
    for i, data in ipairs(map) do
        for key, value in pairs(data) do
            s_file:write("alias " .. key .. "=\"" .. shell_cmd .. " " .. value .. "\"\n")
            n_file:write("key.map('n', '<leader>" .. key .. "', ':e " .. value .. "<CR>')\n")
        end
    end

    s_file:write("\n")
    n_file:write("\n")
end

--- Display failed to open file message to user and exit program
--- @param file file that failed to open
function failedOpen(file)
    print("Failed to open: " .. file)
    os.exit(1)
end

--- Create the files and populates them with the keybindings
--- @param shell shell file path
--- @param nvim neovim file path
--- @param map keybinding map to use
--- @param dir directory map to use
function createFiles(shell, nvim, map, dir)
    local s = io.open(shell, "w") or not failedOpen(shell)
    local n = io.open(nvim, "w") or not failedOpen(nvim)

    s:write("# " .. file_header .. "\n")
    n:write("-- " .. file_header .. "\n")

    n:write("local key = require(\"map\")\n\n")

    createEntries(s, n, map, editor)
    createEntries(s, n, dir, "cd")

    s:close()
    n:close()
end

createFiles(shell_file, nvim_file, keybindings, directories)

